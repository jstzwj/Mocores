CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(mocores)

# 项目文件路径
SET(MOCORES_PATH ${PROJECT_SOURCE_DIR} CACHE STRING "Adds a path to mocores" FORCE)
SET(MOCORES_PATH_BIN ${MOCORES_PATH}/lib/ CACHE STRING "Adds a path to output dir" FORCE)
SET(MOCORES_PATH_DEPENDENCIES ${MOCORES_PATH}/contrib CACHE STRING "Adds a path to mocores dependencies" FORCE)
SET(MOCORES_PATH_SAMPLE ${MOCORES_PATH}/sample CACHE STRING "Adds a path to mocores sample" FORCE)
SET(MOCORES_PATH_TOOLS ${MOCORES_PATH}/tools CACHE STRING "Adds a path to mocores tools" FORCE)
SET(MOCORES_PATH_TESTS ${MOCORES_PATH}/tests CACHE STRING "Adds a path to mocores tests" FORCE)
SET(MOCORES_PATH_INCLUDE ${MOCORES_PATH}/include CACHE STRING "Adds a path to mocores header" FORCE)
SET(MOCORES_PATH_HEADER ${MOCORES_PATH_INCLUDE}/mocores CACHE STRING "Adds a path to mocores header" FORCE)
SET(MOCORES_PATH_SOURCE ${MOCORES_PATH}/source CACHE STRING "Adds a path to mocores source" FORCE)

# 编译选项
OPTION(MOCORES_BUILD_NO_TESTS "ON to disable test binary generation" OFF)
OPTION(MOCORES_BUILD_SSE "ON for use OFF for ignore" OFF)
OPTION(MOCORES_BUILD_DEBUG_MODE "ON for debug or OFF for release" ON)
OPTION(MOCORES_BUILD_MUTILTHREAD_DLL "ON for /MD OFF for /MT" ON)

# 设置默认编译平台
IF(ANDROID_ABI OR CMAKE_SYSTEM_NAME MATCHES "VCMDDAndroid")
	SET(PLATFORM 3)
	SET(VCMDDAndroid 1)
ELSEIF(WIN32)
	SET(PLATFORM 4)
ELSEIF(APPLE)
	SET(PLATFORM 1)
ELSEIF(UNIX)
	SET(PLATFORM 2)
ELSE()
	SET(PLATFORM 4)
ENDIF()

# 设置目标编译平台
SET(MOCORES_BUILD_PLATFORM ${PLATFORM} CACHE STRING
"Specify the platform. Possible values:
  1 - Apple
  2 - Linux
  3 - Android
  4 - Windows
  5 - Java"
)

IF(MOCORES_BUILD_PLATFORM EQUAL 1)
	SET(MOCORES_BUILD_PLATFORM_APPLE TRUE)
	ADD_DEFINITIONS(-DMOCORES_BUILD_PLATFORM_APPLE)
ELSEIF(MOCORES_BUILD_PLATFORM EQUAL 2)
	SET(MOCORES_BUILD_PLATFORM_LINUX TRUE)
	ADD_DEFINITIONS(-DMOCORES_BUILD_PLATFORM_LINUX)
ELSEIF(MOCORES_BUILD_PLATFORM EQUAL 3)
	SET(MOCORES_BUILD_PLATFORM_ANDROID TRUE)
	ADD_DEFINITIONS(-DMOCORES_BUILD_PLATFORM_ANDROID)
ELSEIF(MOCORES_BUILD_PLATFORM EQUAL 4)
	SET(MOCORES_BUILD_PLATFORM_WINDOWS TRUE)
	ADD_DEFINITIONS(-DMOCORES_BUILD_PLATFORM_WINDOWS)
ELSEIF(MOCORES_BUILD_PLATFORM EQUAL 5)
	SET(MOCORES_BUILD_PLATFORM_JAVA TRUE)
	ADD_DEFINITIONS(-DMOCORES_BUILD_PLATFORM_JAVA)
ENDIF()

IF(MOCORES_BUILD_DEBUG_MODE)
	SET(CMAKE_BUILD_TYPE Debug CACHE STRING "One of None Debug Release RelWithDebInfo MinSizeRel" FORCE)
ELSE()
	SET(CMAKE_BUILD_TYPE Release CACHE STRING "One of None Debug Release RelWithDebInfo MinSizeRel" FORCE)
ENDIF()

# 设置不同平台下链接时后缀
IF(MOCORES_BUILD_PLATFORM_LINUX OR MOCORES_BUILD_PLATFORM_ANDROID)
	SET(PLATFORM_NAME "linux")
ELSEIF(MOCORES_BUILD_PLATFORM_APPLE)
	SET(PLATFORM_NAME "apple")
ELSEIF(MOCORES_BUILD_PLATFORM_WINDOWS)
	SET(PLATFORM_NAME "win")
	ADD_DEFINITIONS(-D_WINDOWS)
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)

	SET(COMPILER_NAME "vc")
	IF(MSVC_VERSION GREATER 1600)
		SET(COMPILER_NAME "11")
	ELSEIF(MSVC_VERSION GREATER 1500)
		SET(COMPILER_NAME "10")
	ELSEIF(MSVC_VERSION GREATER 1400)
		SET(COMPILER_NAME "9")
	ENDIF()
ENDIF()

IF(CMAKE_GENERATOR MATCHES "ARM")
	SET(LIBRARY_OUT_NAME "ARM")
ELSEIF(CMAKE_GENERATOR MATCHES "Win64")
	SET(LIBRARY_OUT_NAME "64")
	SET(WIN64 TRUE)
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio")
	SET(LIBRARY_OUT_NAME "86")
	SET(WIN32 TRUE)
ELSE()
	SET(LIBRARY_OUT_NAME "86")
ENDIF()

# CXX 14 扩展
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

# 设置编译文件后缀
SET(CMAKE_DEBUG_POSTFIX "_d" CACHE STRING "Adds a postfix for debug-built libraries.")
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "Adds a postfix for release-built libraries.")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "_RelWithDebugInfo" CACHE STRING "Adds a postfix for ReleaseWithDebug-built libraries.")
SET(CMAKE_MINSIZEREL_POSTFIX "_MinsizeRel" CACHE STRING "Adds a postfix for MinsizeRelease-built libraries.")

# 指定库文件输出路径
SET(MOCORES_LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib/binaries/${PLATFORM_NAME}${LIBRARY_OUT_NAME} CACHE STRING "build path" FORCE)
SET(MOCORES_LIBRARY_OUTPUT_PATH_DEBUG ${MOCORES_LIBRARY_OUTPUT_PATH}_Debug CACHE STRING "build path" FORCE)
SET(MOCORES_LIBRARY_OUTPUT_PATH_RELEASE ${MOCORES_LIBRARY_OUTPUT_PATH}_Release CACHE STRING "build path" FORCE)
SET(MOCORES_LIBRARY_OUTPUT_PATH_RELWITHDEBINFO ${MOCORES_LIBRARY_OUTPUT_PATH}_RelWithDebugInfo CACHE STRING "build path" FORCE)
SET(MOCORES_LIBRARY_OUTPUT_PATH_MINSIZEREL ${MOCORES_LIBRARY_OUTPUT_PATH}_MinsizeRel CACHE STRING "build path" FORCE)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

MACRO(SET_TARGET_ATTRIBUTE target directory)
	SET_TARGET_PROPERTIES(${target} PROPERTIES
		ARCHIVE_OUTPUT_DIRECTORY ${MOCORES_LIBRARY_OUTPUT_PATH}
		ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${MOCORES_LIBRARY_OUTPUT_PATH_DEBUG}
		ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${MOCORES_LIBRARY_OUTPUT_PATH_RELEASE}
		ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${MOCORES_LIBRARY_OUTPUT_PATH_RELWITHDEBINFO}
		ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${MOCORES_LIBRARY_OUTPUT_PATH_MINSIZEREL}
		LIBRARY_OUTPUT_DIRECTORY ${MOCORES_LIBRARY_OUTPUT_PATH}
		LIBRARY_OUTPUT_DIRECTORY_DEBUG ${MOCORES_LIBRARY_OUTPUT_PATH_DEBUG}
		LIBRARY_OUTPUT_DIRECTORY_RELEASE ${MOCORES_LIBRARY_OUTPUT_PATH_RELEASE}
		LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${MOCORES_LIBRARY_OUTPUT_PATH_RELWITHDEBINFO}
		LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${MOCORES_LIBRARY_OUTPUT_PATH_MINSIZEREL}
		RUNTIME_OUTPUT_DIRECTORY ${MOCORES_LIBRARY_OUTPUT_PATH}
		RUNTIME_OUTPUT_DIRECTORY_DEBUG ${MOCORES_LIBRARY_OUTPUT_PATH_DEBUG}
		RUNTIME_OUTPUT_DIRECTORY_RELEASE ${MOCORES_LIBRARY_OUTPUT_PATH_RELEASE}
		RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${MOCORES_LIBRARY_OUTPUT_PATH_RELWITHDEBINFO}
		RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${MOCORES_LIBRARY_OUTPUT_PATH_MINSIZEREL}
	)
	SET_TARGET_PROPERTIES(${target} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
	SET_TARGET_PROPERTIES(${target} PROPERTIES PROJECT_LABEL ${target})
	SET_TARGET_PROPERTIES(${target} PROPERTIES FOLDER ${directory})
	IF(MINGW OR CMAKE_GENERATOR MATCHES "Unix")
		STRING(REGEX REPLACE "lib" "" target_name ${target})
		SET_TARGET_PROPERTIES(${target} PROPERTIES OUTPUT_NAME ${target_name})
	ENDIF()
	IF(CMAKE_GENERATOR MATCHES "Visual Studio")
		IF(VCMDDAndroid)
			SET_PROPERTY(TARGET ${LIB_NAME} PROPERTY VC_MDD_ANDROID_API_LEVEL "android-21")
		ELSEIF(${CMAKE_VS_PLATFORM_TOOLSET} STREQUAL "v140_clang_3_7")
			SET_PROPERTY(TARGET ${LIB_NAME} PROPERTY VS_PLATFORM_TOOLSET_OVERRIDE "v140_clang_3_7")
		ENDIF()
	ENDIF()
ENDMACRO()

IF(MINGW OR CMAKE_GENERATOR MATCHES "Unix")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W")

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wignored-qualifiers")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -finput-charset=utf-8")

	IF(UNIX)
		SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	ENDIF()

	IF(SSE)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse")
	ELSEIF(SSE2)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
	ELSEIF(SSE3)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3")
	ELSEIF(SSE4)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3")
	ENDIF()
ELSEIF(CMAKE_GENERATOR MATCHES "Xcode")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -frtti")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -frtti")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
ELSEIF(CMAKE_GENERATOR MATCHES "Visual Studio")
	IF(${CMAKE_VS_PLATFORM_TOOLSET} STREQUAL "v140_clang_3_7" OR ${CMAKE_VS_PLATFORM_TOOLSET} STREQUAL VCMDDAndroid)
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -frtti")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w")

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -frtti")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
	ELSE()
	   # 运行时类型信息
		SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} /GR")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR")

		# 快速的浮点模型
		SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:fast")

		# 多处理器编译
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

		SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} /W0")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W0")
		
		# SEH
		SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /EHa")
		SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /EHa")
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /EHa")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /EHa")

		IF(MOCORES_BUILD_MUTILTHREAD_DLL)
			SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd")
			SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD")
			SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
		ELSE()
			SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
			SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
			SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
		ENDIF()

		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ob2")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ot")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")

		IF(MOCORES_BUILD_SSE)
			SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:SSE")
		ENDIF()
	ENDIF()
ENDIF()

# 添加依赖库
ADD_SUBDIRECTORY(contrib)

IF(CMAKE_GENERATOR MATCHES "Visual Studio")
	IF(${CMAKE_VS_PLATFORM_TOOLSET} STREQUAL "v140_clang_3_7" OR ${CMAKE_VS_PLATFORM_TOOLSET} STREQUAL VCMDDAndroid)
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Wall")
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wreorder") # field 'x' will be initialized after field 'y'
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wshift-negative-value")
	ELSE()
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /W4")

		# W3
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /wd4251") # needs to have dll-interface to be used by clients of class
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /wd4275") # 非 dll 接口 class“std::exception”用作 dll 接口 class“Exception”的基

		# W4
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /wd4100") # 未引用的形参
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /wd4201") # 使用了非标准扩展: 无名称的结构/联合

	ENDIF()
ENDIF()

# 添加项目
ADD_SUBDIRECTORY(source)

# 单元测试
IF(NOT MOCORES_BUILD_NO_TESTS)
	ADD_SUBDIRECTORY(tests)
ENDIF()
